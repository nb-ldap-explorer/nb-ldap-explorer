/* Generated By:JavaCC: Do not edit this line. LDIF_Parser.java */
package com.google.code.nb_ldap_explorer.ldif.javacclexer;

public class LDIF_Parser implements LDIF_ParserConstants {
        public static void main(String args[])
                throws ParseException
        {
                LDIF_Parser parser = new LDIF_Parser(System.in);
                Token t = parser.getNextToken();
                while(t.kind != 0) {
                    System.out.println(t.kind + " - " + t.image);
                    t = parser.getNextToken();
                }
                //parser.LDIF_File();
        }

//-------------------------------------------------
// LDIF GRAMMAR
//-------------------------------------------------
  final public void LDIF_File() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERSION:
      LDIF_Version();
      jj_consume_token(EOL);
      break;
    default:
      ;
    }
    label_1:
    while (true) {
      LDIF_Record();
      label_2:
      while (true) {
        jj_consume_token(EOL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          break label_2;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DN_START:
      case DN64_START:
        ;
        break;
      default:
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  final public void LDIF_Version() throws ParseException {
    jj_consume_token(VERSION);
    jj_consume_token(VERSION_NUM);
  }

  final public void LDIF_Record() throws ParseException {
    DN_Spec();
    jj_consume_token(EOL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHANGETYPE:
    case CONTROL:
      ChangeRecord();
      break;
    case ATTRIBUTE_TYPE_STRING:
    case LDAP_OID:
      AttributeTypeAndValueRecord();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DN_Spec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DN_START:
      Normal_DN_Spec();
      break;
    case DN64_START:
      Base64_DN_Spec();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Normal_DN_Spec() throws ParseException {
    jj_consume_token(DN_START);
    Normal_DN_Value();
  }

  final public void Normal_DN_Value_Sep() throws ParseException {
    jj_consume_token(DNVALUESEP);
  }

  final public void DN_NameComponent_Sep() throws ParseException {
    jj_consume_token(DNNAMECOMPONENTSEP);
  }

  final public void NC_AttributeTypeAndValue_Sep() throws ParseException {
    jj_consume_token(NCATTRIBUTETYPEVALUESEP);
  }

  final public void Normal_DN_Value() throws ParseException {
    DN_NameComponent();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DNVALUESEP:
        ;
        break;
      default:
        break label_3;
      }
      Normal_DN_Value_Sep();
      DN_NameComponent();
    }
  }

  final public void DN_NameComponent() throws ParseException {
    NC_AttributeTypeAndValue();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DNNAMECOMPONENTSEP:
        ;
        break;
      default:
        break label_4;
      }
      DN_NameComponent_Sep();
      NC_AttributeTypeAndValue();
    }
  }

  final public void NC_AttributeTypeAndValue() throws ParseException {
    NC_AttributeType();
    NC_AttributeTypeAndValue_Sep();
                                                             token_source.SwitchTo(ATTVALUE_S);
    NC_AttributeValue();
  }

  final public void NC_AttributeType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LDAP_OID:
      jj_consume_token(LDAP_OID);
      break;
    case ATTRIBUTE_TYPE_STRING:
      jj_consume_token(ATTRIBUTE_TYPE_STRING);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NC_AttributeValue() throws ParseException {
    jj_consume_token(ATTVALUE);
  }

  final public void Base64_DN_Spec() throws ParseException {
    jj_consume_token(DN64_START);
                      token_source.SwitchTo(DN64_VALUE_S);
    Base64_DN_Value();
                                                                               token_source.SwitchTo(DEFAULT);
  }

  final public void Base64_DN_Value() throws ParseException {
    jj_consume_token(DN64_VALUE);
  }

  final public void AttributeTypeAndValueRecord() throws ParseException {
    label_5:
    while (true) {
      AttributeTypeAndValue_Spec();
      jj_consume_token(EOL);
                                             token_source.SwitchTo(DEFAULT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTRIBUTE_TYPE_STRING:
      case LDAP_OID:
        ;
        break;
      default:
        break label_5;
      }
    }
  }

  final public void AttributeTypeAndValue_Spec() throws ParseException {
    AttributeDescription();
    Value_Spec();
  }

  final public void Value_Spec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATTVAL_SEP:
      jj_consume_token(ATTVAL_SEP);
                                token_source.SwitchTo(ATTVALUE_S);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTVALUE:
        AttributeValue();
        break;
      default:
        ;
      }
      break;
    case ATTVAL_SEP_64:
      jj_consume_token(ATTVAL_SEP_64);
                                   token_source.SwitchTo(ATTVALUE_S_64);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BASE64_ATTVALUE:
        Base64_AttributeValue();
        break;
      default:
        ;
      }
      break;
    case ATTVAL_SEP_URL:
      jj_consume_token(ATTVAL_SEP_URL);
                                    token_source.SwitchTo(ATTVALUE_S_URL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case URL:
        URL();
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AttributeDescription() throws ParseException {
    AttributeType();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPTION_SEP:
        ;
        break;
      default:
        break label_6;
      }
      Options();
    }
  }

  final public void AttributeType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LDAP_OID:
      jj_consume_token(LDAP_OID);
      break;
    case ATTRIBUTE_TYPE_STRING:
      AttributeTypeString();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AttributeTypeString() throws ParseException {
    jj_consume_token(ATTRIBUTE_TYPE_STRING);
  }

  final public void Options() throws ParseException {
    jj_consume_token(OPTION_SEP);
    jj_consume_token(ATTRIBUTE_TYPE_STRING);
  }

  final public void AttributeValue() throws ParseException {
    jj_consume_token(ATTVALUE);
  }

  final public void Base64_AttributeValue() throws ParseException {
    jj_consume_token(BASE64_ATTVALUE);
  }

  final public void URL() throws ParseException {
    jj_consume_token(URL);
  }

  final public void ChangeRecord() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTROL:
        ;
        break;
      default:
        break label_7;
      }
      jj_consume_token(CONTROL);
      jj_consume_token(ATTVAL_SEP);
      jj_consume_token(LDAP_OID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        label_8:
        while (true) {
          jj_consume_token(SPACE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SPACE:
            ;
            break;
          default:
            break label_8;
          }
        }
        jj_consume_token(CONTROL_CRITICALITY);
        break;
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTVAL_SEP:
      case ATTVAL_SEP_64:
      case ATTVAL_SEP_URL:
        Value_Spec();
        break;
      default:
        ;
      }
      jj_consume_token(EOL);
    }
    jj_consume_token(CHANGETYPE);
    jj_consume_token(ATTVAL_SEP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      jj_consume_token(ADD);
      jj_consume_token(EOL);
      AttributeTypeAndValueRecord();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case END_OF_MOD:
        jj_consume_token(END_OF_MOD);
        break;
      default:
        ;
      }
      break;
    case DELETE:
      jj_consume_token(DELETE);
      jj_consume_token(EOL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case END_OF_MOD:
        jj_consume_token(END_OF_MOD);
        break;
      default:
        ;
      }
      break;
    case MODIFY:
      jj_consume_token(MODIFY);
      jj_consume_token(EOL);
      Modify_Spec();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case END_OF_MOD:
          ;
          break;
        default:
          break label_9;
        }
        jj_consume_token(END_OF_MOD);
        jj_consume_token(EOL);
        Modify_Spec();
      }
      break;
    case MODRDN:
      jj_consume_token(MODRDN);
      jj_consume_token(EOL);
      ModRDN_Spec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case END_OF_MOD:
        jj_consume_token(END_OF_MOD);
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Modify_Spec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      jj_consume_token(ADD);
      jj_consume_token(ATTVAL_SEP);
      AttributeDescription();
      jj_consume_token(EOL);
      AttributeTypeAndValue_Spec();
      jj_consume_token(EOL);
                                                    token_source.SwitchTo(DEFAULT);
      break;
    case DELETE:
      jj_consume_token(DELETE);
      jj_consume_token(ATTVAL_SEP);
      AttributeDescription();
      jj_consume_token(EOL);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTRIBUTE_TYPE_STRING:
        case LDAP_OID:
          ;
          break;
        default:
          break label_10;
        }
        AttributeTypeAndValue_Spec();
        jj_consume_token(EOL);
                                                     token_source.SwitchTo(DEFAULT);
      }
      break;
    case REPLACE:
      jj_consume_token(REPLACE);
      jj_consume_token(ATTVAL_SEP);
      AttributeDescription();
      jj_consume_token(EOL);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTRIBUTE_TYPE_STRING:
        case LDAP_OID:
          ;
          break;
        default:
          break label_11;
        }
        AttributeTypeAndValue_Spec();
        jj_consume_token(EOL);
                                                     token_source.SwitchTo(DEFAULT);
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ModRDN_Spec() throws ParseException {
    jj_consume_token(NEWRDN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATTVAL_SEP:
      jj_consume_token(ATTVAL_SEP);
      DN_NameComponent();
      break;
    case ATTVAL_SEP_64:
      jj_consume_token(ATTVAL_SEP_64);
                                  token_source.SwitchTo(DN64_VALUE_S);
      Base64_DN_Value();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(EOL);
                 token_source.SwitchTo(DEFAULT);
    jj_consume_token(DELETEOLDRDN);
    jj_consume_token(ATTVAL_SEP);
                                     token_source.SwitchTo(DELETEOLDRDN_S);
    jj_consume_token(DELETEOLDRDN_YESNO);
    jj_consume_token(EOL);
                token_source.SwitchTo(DEFAULT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEWSUPERIOR:
      jj_consume_token(NEWSUPERIOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTVAL_SEP:
        jj_consume_token(ATTVAL_SEP);
        Normal_DN_Value();
        break;
      case ATTVAL_SEP_64:
        jj_consume_token(ATTVAL_SEP_64);
                                         token_source.SwitchTo(DN64_VALUE_S);
        Base64_DN_Value();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(EOL);
                       token_source.SwitchTo(DEFAULT);
      break;
    default:
      ;
    }
  }

  /** Generated Token Manager. */
  public LDIF_ParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;

  /** Constructor with InputStream. */
  public LDIF_Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LDIF_Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LDIF_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor. */
  public LDIF_Parser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new LDIF_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public LDIF_Parser(LDIF_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(LDIF_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
